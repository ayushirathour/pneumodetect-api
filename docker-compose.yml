
services:
  # FastAPI Backend (connecting to your MongoDB Atlas)
  fastapi_backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: pneumodetect_api
    restart: unless-stopped
    ports:
      - "7860:7860"
    env_file:
      - ./api/.env.docker  # Use env_file instead of duplicating
    volumes:
      - ./api/models:/app/models:ro
      - api_logs:/app/logs
    networks:
      - pneumodetect_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # Give more time for startup

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pneumodetect_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - pneumodetect_network
    depends_on:
      - fastapi_backend

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pneumodetect_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - pneumodetect_network
    depends_on:
      - prometheus

  # Redis Cache (for JWT blacklisting in production)
  redis:
    image: redis:7-alpine
    container_name: pneumodetect_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pneumodetect_network
    command: redis-server --appendonly yes

# Named volumes for persistent data
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local

# Network for service communication
networks:
  pneumodetect_network:
    driver: bridge
